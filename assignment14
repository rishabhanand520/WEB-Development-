//question1
//index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Box Positioning</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <div class="box" id="boxA"></div>
        <div class="box" id="boxB"></div>
        <div class="box" id="boxC"></div>
        <div class="box" id="boxD"></div>
        <div class="box" id="boxE"></div>
    </div>
</body>
</html>

/style.css
/* Basic Styles */
body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f0f0f0;
}

.container {
    position: relative;
    width: 500px;
    height: 500px;
}

/* Box Styles */
.box {
    width: 50px;
    height: 50px;
    background-color: lightblue;
    position: absolute;
}

/* Box A positioning */
#boxA {
    top: 200px;
    left: 200px;
}

/* Box B positioning */
#boxB {
    top: calc(200px - 30px); /* 30px above the center of box A */
    left: calc(200px - 30px); /* 30px left of the center of box A */
}

/* Box C positioning */
#boxC {
    top: calc(200px - 30px); /* 30px above the center of box A */
    left: calc(200px + 50px + 30px); /* 30px right of the center of box A */
}

/* Box D positioning */
#boxD {
    top: calc(200px + 50px + 30px); /* 30px below the center of box A */
    left: calc(200px - 30px); /* 30px left of the center of box A */
}

/* Box E positioning */
#boxE {
    top: calc(200px + 50px + 30px); /* 30px below the center of box A */
    left: calc(200px + 50px + 30px); /* 30px right of the center of box A */
}

//question2
Feature	        Relative Positioning (position: relative)
How it works: When an element is positioned relative, it is positioned based on its normal position in the document flow (its position before any positioning is applied). However, it can then be moved relative to that normal position using the top, right, bottom, and left properties.

Effect on Layout: The element still occupies space in the document flow, meaning other elements around it will behave as though the element is still in its normal position. This means the space for the element remains reserved in the layout even though it's visually shifted.

Use case: It's commonly used when you want to slightly move an element from its original position without removing it from the document flow.

Example:
html
Copy
Edit
<div class="relative-box">Relative Box</div>
css
Copy
Edit
.relative-box {
    position: relative;
    left: 50px;  /* Moves the box 50px to the right */
    top: 20px;   /* Moves the box 20px down */
    background-color: lightblue;
    padding: 20px;
}
The element is moved 50px to the right and 20px down from its original position, but it still takes up the same space in the layout as if it hadnâ€™t been moved.
2. Absolute Positioning (position: absolute)
How it works: When an element is positioned absolutely, it is removed from the normal document flow and positioned relative to the nearest positioned ancestor (an element with position set to relative, absolute, or fixed). If no such ancestor exists, it will be positioned relative to the document body or the viewport.

Effect on Layout: The element is removed from the document flow, meaning it doesn't affect the position or layout of other elements around it. The space it would normally occupy is not reserved in the layout.

Use case: It is typically used when you want to position an element precisely in a specific location on the page without affecting the surrounding elements.

Example:
html
Copy
Edit
<div class="absolute-container">
    <div class="absolute-box">Absolute Box</div>
</div>
css
Copy
Edit
.absolute-container {
    position: relative;  /* The positioned ancestor */
    width: 300px;
    height: 300px;
    background-color: lightgray;
}

.absolute-box {
    position: absolute;
    top: 50px;  /* 50px from the top of the nearest positioned ancestor */
    left: 100px; /* 100px from the left of the nearest positioned ancestor */
    background-color: lightgreen;
    padding: 10px;
}
The .absolute-box is positioned 50px from the top and 100px from the left of the .absolute-container div. It does not affect the layout of other elements inside .absolute-container and is removed from the document flow.

//question3

//index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Card Layout</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="card">
        <img src="https://via.placeholder.com/300" alt="Image" class="card-img">
        <div class="card-content">
            <h2 class="card-title">Card Title</h2>
            <p class="card-description">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero.</p>
            <button class="card-button">Learn More</button>
        </div>
    </div>
</body>
</html>
//style.css
body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #f4f4f4;
}

.card {
    width: 300px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    float: left;
    margin: 20px;
}

.card-img {
    width: 100%;
    height: auto;
}

.card-content {
    padding: 20px;
}

.card-title {
    font-size: 22px;
    margin-bottom: 10px;
}

.card-description {
    font-size: 16px;
    margin-bottom: 20px;
    color: #555;
}

.card-button {
    background-color: #007BFF;
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 16px;
}

.card-button:hover {
    background-color: #0056b3;
}

//question3
//index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sticky Header</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header class="sticky-header">
        <h1>Sticky Header</h1>
        <nav>
            <ul>
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#services">Services</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>

    <section id="home">
        <h2>Home</h2>
        <p>Some content here...</p>
    </section>
    <section id="about">
        <h2>About</h2>
        <p>Some content here...</p>
    </section>
    <section id="services">
        <h2>Services</h2>
        <p>Some content here...</p>
    </section>
    <section id="contact">
        <h2>Contact</h2>
        <p>Some content here...</p>
    </section>

</body>
</html>
//style.css
/* Basic reset for margins */
body, h1, h2, ul {
    margin: 0;
    padding: 0;
}

/* Header styles */
.sticky-header {
    background-color: #333;
    color: white;
    padding: 20px;
    position: sticky;
    top: 0; /* Sticks to the top of the viewport */
    width: 100%;
    z-index: 1000; /* Ensures it stays on top of other content */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

.sticky-header h1 {
    display: inline-block;
    margin-right: 20px;
}

.sticky-header nav {
    display: inline-block;
}

.sticky-header ul {
    list-style: none;
}

.sticky-header li {
    display: inline;
    margin-right: 15px;
}

.sticky-header a {
    color: white;
    text-decoration: none;
    font-size: 18px;
}

.sticky-header a:hover {
    text-decoration: underline;
}

/* Sections to create some scrollable content */
section {
    padding: 60px;
    margin: 20px;
    background-color: #f9f9f9;
    min-height: 100vh;
}

section:nth-child(even) {
    background-color: #e9e9e9;
}


//question5

The z-index only works on elements that have a position value of relative, absolute, fixed, or sticky. 
It does not work on elements with the default static position.
z-index values can be positive, negative, or zero.
Positive values will place the element in front of other elements with a lower value.
Negative values will place the element behind others.
A z-index of 0 will place the element at the same level as other elements with a z-index of 0.
Elements without a specified z-index will be stacked based on their order in the document flow.
Example of z-index in Action
Below is an example to demonstrate how z-index works in CSS.

HTML:
html
Copy
Edit
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Z-index Example</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>

    <div class="box box1">Box 1</div>
    <div class="box box2">Box 2</div>
    <div class="box box3">Box 3</div>

</body>
</html>
CSS (styles.css):
css
Copy
Edit
/* Basic styling for all boxes */
.box {
    position: absolute;
    width: 200px;
    height: 200px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 20px;
    color: white;
    border-radius: 10px;
}

/* Box 1 - Red background */
.box1 {
    background-color: red;
    left: 50px;
    top: 50px;
    z-index: 1; /* Box 1 will appear behind Box 2 */
}

/* Box 2 - Green background */
.box2 {
    background-color: green;
    left: 100px;
    top: 100px;
    z-index: 2; /* Box 2 will appear in front of Box 1 */
}

/* Box 3 - Blue background */
.box3 {
    background-color: blue;
    left: 150px;
    top: 150px;
    z-index: 0; /* Box 3 will appear behind both Box 1 and Box 2 */
}
