//question1
// Arrow function to calculate square
const square = (number) => number * number;

// Example usage
const num = 5;  // You can change this value to calculate the square of other numbers
const result = square(num);

// Display the result
console.log(`The square of ${num} is: ${result}`);

output
The square of 5 is: 25

//question2

// Function to generate personalized greeting
function generateGreeting(name) {
    return `Hello, ${name}! Welcome to the site.`;
}

// Greet three different people
console.log(generateGreeting("Alice"));
console.log(generateGreeting("Bob"));
console.log(generateGreeting("Charlie"));

output
Hello, Alice! Welcome to the site.
Hello, Bob! Welcome to the site.
Hello, Charlie! Welcome to the site.

//question3


// IIFE to calculate the square of a number and immediately display the result
(function(number) {
    const square = number * number;
    console.log(`The square of ${number} is: ${square}`);
})(5);  // You can change 5 to any number to calculate its square

//question4

function calculateTax(income) {
    // Define tax rates using closures
    return function() {
        let taxRate;

        // Determine the tax rate based on income ranges
        if (income <= 10000) {
            taxRate = 0.05; // 5% tax for income <= 10,000
        } else if (income <= 50000) {
            taxRate = 0.10; // 10% tax for income between 10,001 and 50,000
        } else {
            taxRate = 0.20; // 20% tax for income above 50,000
        }

        // Calculate and return the tax to be paid
        return income * taxRate;
    };
}

// Test the function with different incomes
const tax1 = calculateTax(8000)(); // 8000 income, 5% tax rate
console.log(`Tax for income 8000: $${tax1}`);

const tax2 = calculateTax(20000)(); // 20000 income, 10% tax rate
console.log(`Tax for income 20000: $${tax2}`);

const tax3 = calculateTax(60000)(); // 60000 income, 20% tax rate
console.log(`Tax for income 60000: $${tax3}`);

//ouitut

Tax for income 8000: $400
Tax for income 20000: $2000
Tax for income 60000: $12000

//question5

// Recursive function to calculate the factorial
function factorial(n) {
    // Base case: if n is 0 or 1, return 1
    if (n === 0 || n === 1) {
        return 1;
    } else {
        // Recursive case: n * factorial of (n-1)
        return n * factorial(n - 1);
    }
}

// Test the function with different inputs
console.log(factorial(5));  // Output: 120
console.log(factorial(0));  // Output: 1
console.log(factorial(3));  // Output: 6
console.log(factorial(7));  // Output: 5040

//question6
// The curry function
function curry(fn) {
    // Return a function that will keep accepting arguments
    return function curried(...args) {
        // If the number of arguments is less than the original function's length
        if (args.length < fn.length) {
            // Return a new function to collect the remaining arguments
            return function(...nextArgs) {
                return curried(...args, ...nextArgs); // Combine arguments and continue curried calls
            };
        } else {
            // If all arguments are collected, execute the original function
            return fn(...args);
        }
    };
}

// Example function that adds two numbers
function add(a, b) {
    return a + b;
}

// Currying the add function
const curriedAdd = curry(add);

// Test the curried function
console.log(curriedAdd(5)(3));  // Output: 8
console.log(curriedAdd(10)(20));  // Output: 30
